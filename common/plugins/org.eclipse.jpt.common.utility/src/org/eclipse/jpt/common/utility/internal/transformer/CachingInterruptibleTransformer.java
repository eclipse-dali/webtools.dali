/*******************************************************************************
 * Copyright (c) 2016 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0, which accompanies this distribution
 * and is available at http://www.eclipse.org/legal/epl-v10.html.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/
package org.eclipse.jpt.common.utility.internal.transformer;

import java.util.concurrent.CancellationException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;
import org.eclipse.jpt.common.utility.internal.ObjectTools;
import org.eclipse.jpt.common.utility.transformer.InterruptibleTransformer;

/**
 * A transformer that caches, in a thread-safe fashion, the results
 * generated by another transformer;
 * the assumption being that the transformation is an expensive action.
 * 
 * @param <I> input: the type of the object passed to the transformer
 * @param <O> output: the type of the object returned by the transformer
 * @see CachingTransformer
 */
public class CachingInterruptibleTransformer<I, O>
	implements InterruptibleTransformer<I, O>
{
	private final InterruptibleTransformer<? super I, ? extends O> transformer;
	private final ConcurrentHashMap<I, FutureTask<O>> cache = new ConcurrentHashMap<>();


	public CachingInterruptibleTransformer(InterruptibleTransformer<? super I, ? extends O> transformer) {
		super();
		if (transformer == null) {
			throw new NullPointerException();
		}
		this.transformer = transformer;
	}

	public O transform(final I input) throws InterruptedException {
		while (true) {
			FutureTask<O> outputRef = this.cache.get(input);
			if (outputRef == null) {
				FutureTask<O> temp = TransformerTools.runnableFuture(this.transformer, input);
				outputRef = this.cache.putIfAbsent(input, temp);
				if (outputRef == null) {
					outputRef = temp;
					outputRef.run(); // potentially expensive action
				}
			}
			try {
				return outputRef.get(); // will suspend current thread until 'run' is complete
			} catch (CancellationException ex) {
				this.cache.remove(input, outputRef);
			} catch (ExecutionException ex) {
				throw this.launderExecutionExceptionCause(ex.getCause());
			}
		}
	}

	private RuntimeException launderExecutionExceptionCause(Throwable t) {
		if (t instanceof RuntimeException) {
			return (RuntimeException) t;
		}
		if (t instanceof Error) {
			throw (Error) t;
		}
		throw new IllegalStateException("Not unchecked", t); //$NON-NLS-1$
	}

	@Override
	public String toString() {
		return ObjectTools.toString(this, this.transformer);
	}
}
