/*******************************************************************************
 * Copyright (c) 2016 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0, which accompanies this distribution
 * and is available at http://www.eclipse.org/legal/epl-v10.html.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/
package org.eclipse.jpt.common.utility.internal.transformer;

import java.util.HashMap;
import org.eclipse.jpt.common.utility.internal.ObjectTools;
import org.eclipse.jpt.common.utility.transformer.Transformer;

/**
 * A transformer that caches the results generated by another transformer;
 * the assumption being that the transformation is an expensive action.
 * 
 * @param <I> input: the type of the object passed to the transformer
 * @param <O> output: the type of the object returned by the transformer
 * @see CachingInterruptibleTransformer
 */
public class CachingTransformer<I, O>
	implements Transformer<I, O>
{
	private final Transformer<? super I, ? extends O> transformer;
	private final HashMap<I, O> cache = new HashMap<>();


	public CachingTransformer(Transformer<? super I, ? extends O> transformer) {
		super();
		if (transformer == null) {
			throw new NullPointerException();
		}
		this.transformer = transformer;
	}

	public O transform(final I input) {
		O output = this.cache.get(input);
		if (output == null) {
			output = this.transformer.transform(input);
			this.cache.put(input, output);
		}
		return output;
	}

	public Transformer<? super I, ? extends O> getTransformer() {
		return this.transformer;
	}

	public HashMap<I, O> getCache() {
		return this.cache;
	}

	@Override
	public String toString() {
		return ObjectTools.toString(this, this.transformer);
	}
}
